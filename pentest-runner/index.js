'use const'

const { S3Client, GetObjectCommand } = require('@aws-sdk/client-s3')
const { EC2Client, StartInstancesCommand, StopInstancesCommand } = require('@aws-sdk/client-ec2')
const { SSMClient, SendCommandCommand, DescribeInstanceInformationCommand, ListCommandInvocationsCommand } = require('@aws-sdk/client-ssm')
const configBucket = 'sushifeed-config'
const configKey = 'pentest-config.json'
const { setTimeout } = require('timers/promises')

exports.handler = async (event) => {
  console.log(JSON.stringify(event, null, 2))
  // Pull in our config from S3
  let config
  const s3 = new S3Client()
  const streamToString = (stream) =>
    new Promise((resolve, reject) => {
      const chunks = []
      stream.on('data', (chunk) => chunks.push(chunk))
      stream.on('error', reject)
      stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')))
    })

  await s3.send(new GetObjectCommand({
    Bucket: configBucket,
    Key: configKey
  }))
    .then((s3Obj) => streamToString(s3Obj.Body))
    .then((body) => { config = JSON.parse(body); return true })
    .catch((err) => console.log(err))

  if (!config) {
    return 'Failed to load config'
  }

  // Create environment
  for (const key in config.env) {
    process.env[key] = config.env[key]
  }

  console.log(config)

  // Start our instance
  console.log('Starting instance')
  const ec2 = new EC2Client({ region: config.region })
  let started = false
  await ec2.send(new StartInstancesCommand({
    InstanceIds: [config.instance_id]
  }))
    .then((ids) => { started = true; return started })

  if (!started) {
    return 'Failed to start instance'
  }

  // Wait for instance to register with SSM
  const waitForInstance = (config) =>
    new Promise((resolve, reject) => {
      const ssm = new SSMClient({ region: config.region })
      ssm.send(new DescribeInstanceInformationCommand({
        Filters: [
          {
            Key: 'InstanceIds',
            Values: [config.instance_id]
          }
        ]
      }))
        .then((data) => {
          console.log(data)
          let ready = false
          if (data.InstanceInformationList.length > 0) {
            ready = data.InstanceInformationList[0].PingStatus
          }
          return resolve(ready)
        })
        .catch((err) => reject(err))
    })

  console.log('Waiting for SSM')
  let retry = 0
  let available = await waitForInstance(config)
  while (available !== 'Online') {
    if (++retry > 30) {
      return 'Failed to start instance'
    }
    await setTimeout(10000, 'done')
    available = await waitForInstance(config)
  }

  console.log('At command setup')

  // Run command
  const ssm = new SSMClient({ region: config.region })
  let commandId
  await ssm.send(new SendCommandCommand({
    DocumentName: 'AWS-RunShellScript',
    Targets: [
      {
        Key: 'InstanceIds',
        Values: [
          config.instance_id
        ]
      }
    ],
    Comment: config.script,
    Parameters: {
      commands: [
        config.commandline
      ]
    }
  }))
    .then((res) => { commandId = res.Command.CommandId; return commandId })

  const waitForCommand = (config, commandId) =>
    new Promise((resolve, reject) => {
      const ssm = new SSMClient({ region: config.region })
      ssm.send(new ListCommandInvocationsCommand({
        CommandId: commandId
      }))
        .then((data) => {
          console.log(data)
          let state = 'Unknown'
          if (data.CommandInvocations.length > 0) {
            state = data.CommandInvocations[0].Status
          }
          return resolve(state)
        })
        .catch((err) => reject(err))
    })

  console.log('Waiting for command completion')
  let completed = await waitForCommand(config, commandId)
  retry = 0
  while (completed !== 'Success') {
    if (++retry > 100) {
      return 'Command did not complete in reasonable time'
    }
    await setTimeout(10000, 'done')
    completed = await waitForCommand(config, commandId)
  }

  console.log('Stopping instance')
  // Stop instance
  await ec2.send(new StopInstancesCommand({
    InstanceIds: [config.instance_id]
  }))
}

exports.handler('stuff')
